# Generated by Django 5.2.6 on 2025-09-14 16:13

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BackupPersonagem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versao', models.PositiveSmallIntegerField(help_text='Número da versão do backup', verbose_name='Versão')),
                ('dados_personagem', models.JSONField(help_text='Snapshot completo da ficha', verbose_name='Dados do Personagem')),
                ('motivo_backup', models.CharField(help_text='Razão para criação do backup', max_length=100, verbose_name='Motivo do Backup')),
                ('data_backup', models.DateTimeField(auto_now_add=True, verbose_name='Data do Backup')),
            ],
            options={
                'verbose_name': 'Backup de Personagem',
                'verbose_name_plural': 'Backups de Personagens',
                'ordering': ['-versao'],
            },
        ),
        migrations.CreateModel(
            name='HistoricoPersonagem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('subida_nivel', 'Subida de Nível'), ('mudanca_atributo', 'Mudança de Atributo'), ('nova_magia', 'Nova Magia'), ('novo_equipamento', 'Novo Equipamento'), ('dano', 'Dano Recebido'), ('cura', 'Cura Recebida'), ('outro', 'Outro')], max_length=20, verbose_name='Tipo de Mudança')),
                ('descricao', models.TextField(help_text='Descrição da mudança', verbose_name='Descrição')),
                ('dados_anteriores', models.JSONField(blank=True, help_text='Estado anterior do personagem', null=True, verbose_name='Dados Anteriores')),
                ('dados_novos', models.JSONField(blank=True, help_text='Novo estado do personagem', null=True, verbose_name='Dados Novos')),
                ('data_mudanca', models.DateTimeField(auto_now_add=True, verbose_name='Data da Mudança')),
            ],
            options={
                'verbose_name': 'Histórico do Personagem',
                'verbose_name_plural': 'Históricos dos Personagens',
                'ordering': ['-data_mudanca'],
            },
        ),
        migrations.CreateModel(
            name='Personagem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome do personagem', max_length=100, verbose_name='Nome')),
                ('avatar', models.ImageField(blank=True, help_text='Imagem do personagem', null=True, upload_to='personagens/avatares/', verbose_name='Avatar')),
                ('nivel', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Nível')),
                ('experiencia', models.PositiveIntegerField(default=0, help_text='XP acumulado', verbose_name='Pontos de Experiência')),
                ('forca', models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(18)], verbose_name='Força')),
                ('destreza', models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(18)], verbose_name='Destreza')),
                ('constituicao', models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(18)], verbose_name='Constituição')),
                ('inteligencia', models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(18)], verbose_name='Inteligência')),
                ('sabedoria', models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(18)], verbose_name='Sabedoria')),
                ('carisma', models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(18)], verbose_name='Carisma')),
                ('pontos_vida_max', models.PositiveSmallIntegerField(default=8, help_text='Pontos de vida máximos', verbose_name='PV Máximo')),
                ('pontos_vida_atual', models.PositiveSmallIntegerField(default=8, help_text='Pontos de vida atuais', verbose_name='PV Atual')),
                ('pontos_vida_temporarios', models.PositiveSmallIntegerField(default=0, help_text='Pontos de vida temporários', verbose_name='PV Temporários')),
                ('classe_armadura', models.PositiveSmallIntegerField(default=10, help_text='Classe de Armadura', verbose_name='CA')),
                ('raca', models.JSONField(default=dict, help_text="Dados da raça: {'nome': 'Elfo', 'origem': 'dnd5e', 'tracos': [...]}", verbose_name='Raça')),
                ('classes', models.JSONField(default=list, help_text="Lista de classes: [{'nome': 'Guerreiro', 'nivel': 5, 'origem': 't20'}]", verbose_name='Classes')),
                ('antecedente', models.JSONField(default=dict, help_text='Background/Antecedente do personagem', verbose_name='Antecedente')),
                ('pericias', models.JSONField(default=list, help_text='Lista de perícias e proficiências', verbose_name='Perícias')),
                ('magias_conhecidas', models.JSONField(default=list, help_text='Lista de magias do personagem', verbose_name='Magias Conhecidas')),
                ('equipamentos', models.JSONField(default=list, help_text='Inventário e equipamentos', verbose_name='Equipamentos')),
                ('talentos', models.JSONField(default=list, help_text='Lista de talentos/feats', verbose_name='Talentos')),
                ('dados_unificados', models.JSONField(default=dict, help_text='Dados convertidos para o sistema unificado', verbose_name='Dados Unificados')),
                ('historia', models.TextField(blank=True, help_text='Background e história do personagem', verbose_name='História')),
                ('personalidade', models.TextField(blank=True, help_text='Traços de personalidade, ideais, vínculos e defeitos', verbose_name='Personalidade')),
                ('anotacoes_jogador', models.TextField(blank=True, help_text='Anotações pessoais do jogador', verbose_name='Anotações do Jogador')),
                ('anotacoes_mestre', models.TextField(blank=True, help_text='Anotações visíveis apenas ao mestre', verbose_name='Anotações do Mestre')),
                ('ativo', models.BooleanField(default=True, help_text='Personagem ativo na campanha', verbose_name='Ativo')),
                ('publico', models.BooleanField(default=False, help_text='Ficha visível para outros jogadores', verbose_name='Público')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('versao', models.PositiveSmallIntegerField(default=1, help_text='Versão da ficha (para backup)', verbose_name='Versão')),
            ],
            options={
                'verbose_name': 'Personagem',
                'verbose_name_plural': 'Personagens',
                'ordering': ['nome'],
            },
        ),
    ]
