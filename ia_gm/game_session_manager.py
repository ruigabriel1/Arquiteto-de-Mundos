"""
Sistema de Gerenciamento de Sess√£o de Jogo - Arquiteto de Mundos
Implementa o comportamento de Mestre IA durante sess√µes ativas
"""

import json
import logging
from enum import Enum
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import timezone, datetime

from django.core.cache import cache
from django.db import models

from .models import SessaoIA, InteracaoIA, NPCGerado
from personagens.models import Personagem
from .master_rules import (
    MasterRulesEngine, ModoOperacao, FaseCicloJogo, 
    CicloJogoValidator, obter_modo_operacao_sessao, aplicar_regras_ao_prompt
)

logger = logging.getLogger(__name__)


class EstadoSessao(Enum):
    """Estados poss√≠veis de uma sess√£o"""
    CONFIGURACAO = "configuracao"
    ATIVA = "ativa"
    PAUSADA = "pausada"
    ENCERRADA = "encerrada"


class FaseJogo(Enum):
    """Fases do ciclo de jogo"""
    DESCREVENDO_SITUACAO = "descrevendo_situacao"
    AGUARDANDO_ACOES = "aguardando_acoes"
    PROCESSANDO_TURNO = "processando_turno"


@dataclass
class AcaoJogador:
    """Representa uma a√ß√£o declarada por um jogador"""
    personagem_nome: str
    usuario_id: int
    acao: str
    timestamp: datetime
    processada: bool = False


@dataclass
class EstadoTurno:
    """Estado atual do turno de jogo"""
    numero_turno: int
    fase: FaseJogo
    descricao_situacao: str
    acoes_recebidas: List[AcaoJogador]
    personagens_esperados: List[str]
    aguardando_personagens: List[str]
    narrativa_resultado: Optional[str] = None


class GameSessionManager:
    """Gerenciador principal do modo de jogo"""
    
    def __init__(self, sessao: SessaoIA):
        self.sessao = sessao
        self.cache_key_estado = f"game_session_{sessao.id}_estado"
        self.cache_key_turno = f"game_session_{sessao.id}_turno"
        self.cache_timeout = 3600  # 1 hora
    
    @property
    def estado_sessao(self) -> EstadoSessao:
        """Obt√©m o estado atual da sess√£o"""
        if not self.sessao.ativa:
            return EstadoSessao.ENCERRADA
        
        estado_cache = cache.get(self.cache_key_estado)
        if estado_cache:
            return EstadoSessao(estado_cache)
        
        # Se n√£o h√° cache, assume que √© configura√ß√£o
        return EstadoSessao.CONFIGURACAO
    
    def ativar_modo_jogo(self) -> Dict[str, Any]:
        """Ativa o modo de jogo e inicia primeira situa√ß√£o"""
        # Marca sess√£o como ativa no cache
        cache.set(self.cache_key_estado, EstadoSessao.ATIVA.value, self.cache_timeout)
        
        # Obt√©m personagens da campanha
        personagens = self._obter_personagens_ativos()
        
        # Cria primeiro turno
        estado_turno = EstadoTurno(
            numero_turno=1,
            fase=FaseJogo.DESCREVENDO_SITUACAO,
            descricao_situacao="",
            acoes_recebidas=[],
            personagens_esperados=[p.nome for p in personagens],
            aguardando_personagens=[]
        )
        
        # Salva no cache
        cache.set(self.cache_key_turno, estado_turno.__dict__, self.cache_timeout)
        
        # Gera primeira descri√ß√£o de situa√ß√£o
        primeira_situacao = self._gerar_situacao_inicial()
        
        return {
            "modo": "jogo_ativo",
            "turno": 1,
            "fase": "descrevendo_situacao",
            "personagens": [p.nome for p in personagens],
            "situacao": primeira_situacao,
            "mensagem_sistema": "üé≤ **MODO DE JOGO ATIVADO** - Eu agora sou o Mestre da sess√£o!"
        }
    
    def processar_entrada_jogador(self, entrada: str, usuario_id: int) -> Dict[str, Any]:
        """Processa entrada de um jogador no modo de jogo"""
        if self.estado_sessao != EstadoSessao.ATIVA:
            return {"erro": "Sess√£o n√£o est√° ativa"}
        
        estado_turno = self._obter_estado_turno()
        if not estado_turno:
            return {"erro": "Erro ao obter estado do turno"}
        
        # Identifica o personagem do jogador
        personagem = self._obter_personagem_do_usuario(usuario_id)
        if not personagem:
            return {"erro": "Personagem n√£o encontrado para este usu√°rio"}
        
        if estado_turno.fase == FaseJogo.AGUARDANDO_ACOES:
            return self._processar_acao_jogador(entrada, personagem, estado_turno)
        else:
            return {"mensagem": f"Aguardando sua a√ß√£o, {personagem.nome}!"}
    
    def iniciar_aguardo_acoes(self, situacao: str) -> Dict[str, Any]:
        """Inicia a fase de aguardo de a√ß√µes dos jogadores"""
        estado_turno = self._obter_estado_turno()
        if not estado_turno:
            return {"erro": "Erro ao obter estado do turno"}
        
        # Atualiza estado
        estado_turno.fase = FaseJogo.AGUARDANDO_ACOES
        estado_turno.descricao_situacao = situacao
        estado_turno.aguardando_personagens = estado_turno.personagens_esperados.copy()
        estado_turno.acoes_recebidas = []
        
        # Salva no cache
        cache.set(self.cache_key_turno, estado_turno.__dict__, self.cache_timeout)
        
        personagens_str = ", ".join(estado_turno.personagens_esperados)
        
        return {
            "fase": "aguardando_acoes",
            "situacao": situacao,
            "personagens_aguardando": estado_turno.aguardando_personagens,
            "mensagem_chamada": f"**{personagens_str}**, o que voc√™s fazem?",
            "instrucoes": "Aguardando as a√ß√µes de todos os personagens antes de continuar..."
        }
    
    def _processar_acao_jogador(self, acao: str, personagem: Personagem, estado_turno: EstadoTurno) -> Dict[str, Any]:
        """Processa a a√ß√£o de um jogador espec√≠fico"""
        nome_personagem = personagem.nome
        
        # Verifica se j√° declarou a√ß√£o neste turno
        for acao_existente in estado_turno.acoes_recebidas:
            if acao_existente.personagem_nome == nome_personagem:
                return {
                    "mensagem": f"**{nome_personagem}** j√° declarou sua a√ß√£o neste turno.",
                    "acao_anterior": acao_existente.acao
                }
        
        # Verifica se este personagem estava sendo esperado
        if nome_personagem not in estado_turno.aguardando_personagens:
            return {"mensagem": f"**{nome_personagem}** n√£o precisa declarar a√ß√£o neste momento."}
        
        # Registra a a√ß√£o
        nova_acao = AcaoJogador(
            personagem_nome=nome_personagem,
            usuario_id=personagem.usuario.id,
            acao=acao,
            timestamp=datetime.now(timezone.utc)
        )
        
        estado_turno.acoes_recebidas.append(nova_acao.__dict__)
        estado_turno.aguardando_personagens.remove(nome_personagem)
        
        # Atualiza cache
        cache.set(self.cache_key_turno, estado_turno.__dict__, self.cache_timeout)
        
        # Registra intera√ß√£o
        self._registrar_interacao_jogador(personagem, acao)
        
        # Verifica se todos j√° declararam
        if len(estado_turno.aguardando_personagens) == 0:
            return self._processar_turno_completo(estado_turno)
        else:
            aguardando_str = ", ".join(estado_turno.aguardando_personagens)
            return {
                "acao_confirmada": f"**{nome_personagem}**: {acao}",
                "aguardando": aguardando_str,
                "mensagem": f"A√ß√£o de **{nome_personagem}** registrada! Aguardando: **{aguardando_str}**"
            }
    
    def _processar_turno_completo(self, estado_turno: EstadoTurno) -> Dict[str, Any]:
        """Processa o turno quando todas as a√ß√µes foram recebidas"""
        # Valida ciclo de jogo antes de processar
        validacao = CicloJogoValidator.validar_fase_atual(
            FaseCicloJogo.PROCESSANDO_CONSEQUENCIAS, 
            "", 
            estado_turno.aguardando_personagens
        )
        
        if not validacao['valida']:
            logger.warning(f"Viola√ß√£o do ciclo de jogo: {validacao['feedback']}")
        
        estado_turno.fase = FaseJogo.PROCESSANDO_TURNO
        cache.set(self.cache_key_turno, estado_turno.__dict__, self.cache_timeout)
        
        # Gera narrativa das consequ√™ncias
        narrativa = self._gerar_narrativa_consequencias(estado_turno)
        
        # Gera nova situa√ß√£o para o pr√≥ximo turno
        proximo_numero_turno = estado_turno.numero_turno + 1
        nova_situacao = self.gerar_nova_situacao(proximo_numero_turno)
        
        # Prepara pr√≥ximo turno com a nova situa√ß√£o
        novo_estado = EstadoTurno(
            numero_turno=proximo_numero_turno,
            fase=FaseJogo.AGUARDANDO_ACOES,  # J√° come√ßa aguardando a√ß√µes
            descricao_situacao=nova_situacao['situacao'],
            acoes_recebidas=[],
            personagens_esperados=estado_turno.personagens_esperados,
            aguardando_personagens=estado_turno.personagens_esperados.copy()
        )
        
        cache.set(self.cache_key_turno, novo_estado.__dict__, self.cache_timeout)
        
        return {
            "turno_processado": True,
            "numero_turno": estado_turno.numero_turno,
            "acoes_processadas": [
                f"**{acao['personagem_nome']}**: {acao['acao']}" 
                for acao in estado_turno.acoes_recebidas
            ],
            "narrativa_resultado": narrativa,
            "proximo_turno": novo_estado.numero_turno,
            "nova_situacao": nova_situacao,
            "mensagem": "‚úÖ **Turno processado!** Todas as a√ß√µes foram resolvidas."
        }
    
    def _gerar_situacao_inicial(self) -> str:
        """Gera a primeira descri√ß√£o de situa√ß√£o da sess√£o - VERS√ÉO OTIMIZADA"""
        personagens = self._obter_personagens_ativos()
        personagens_nomes = [p.nome for p in personagens]
        personagens_str = ", ".join(personagens_nomes)
        
        # OTIMIZA√á√ÉO: Usa fallback inteligente imediatamente para melhor UX
        # Em produ√ß√£o, pode-se configurar para tentar IA com timeout curto
        
        logger.info("Gerando situa√ß√£o inicial otimizada (fallback inteligente)")
        
        # Coleta contexto b√°sico da campanha
        nome_campanha = self.sessao.campanha.nome
        descricao_campanha = self.sessao.campanha.descricao or ""
        nome_sessao = self.sessao.nome
        descricao_sessao = self.sessao.descricao or ""
        
        # Verifica sess√µes anteriores para contexto
        sessoes_anteriores = SessaoIA.objects.filter(
            campanha=self.sessao.campanha
        ).exclude(id=self.sessao.id).order_by('-data_criacao')[:2]
        
        tem_historico = sessoes_anteriores.exists()
        
        # Gera situa√ß√£o contextualizada sem IA externa
        situacao = self._gerar_situacao_inteligente(
            personagens_str, nome_campanha, descricao_campanha,
            nome_sessao, descricao_sessao, tem_historico
        )
        
        # Registra como intera√ß√£o r√°pida
        InteracaoIA.objects.create(
            sessao=self.sessao,
            usuario=self.sessao.campanha.organizador,
            tipo_interacao='SITUACAO_INICIAL',
            prompt_usuario='Gera√ß√£o de situa√ß√£o inicial otimizada',
            resposta_ia=situacao[:2000],
            tokens_usados=0,
            contexto={
                'modo': 'jogo_ativo', 
                'tipo': 'situacao_inicial_otimizada',
                'personagens_count': len(personagens),
                'tem_historico': tem_historico
            }
        )
        
        return situacao
    
    def _gerar_situacao_inteligente(self, personagens_str: str, nome_campanha: str, 
                                    descricao_campanha: str, nome_sessao: str, 
                                    descricao_sessao: str, tem_historico: bool) -> str:
        """Gera situa√ß√£o inicial concreta e direta, sem meta-linguagem - OTIMIZADA"""
        import random
        
        # Ganchos narrativos concretos e diretos
        ganchos = [
            "Uma estranha n√©voa dourada dissipa-se √† vossa frente, revelando um beco que n√£o estava l√° antes.",
            "O som de cascos de cavalo aproxima-se rapidamente pela estrada empoeirada.",
            "Um mensageiro ofegante entrega-vos uma carta lacrada com o selo real.",
            "Dentro da taverna, voc√™s ouvem um boato sobre uma ru√≠na rec√©m-descoberta na floresta pr√≥xima.",
            "O c√©u escurece subitamente, e uma sombra gigantesca passa por cima de voc√™s, bloqueando o sol por um instante.",
            "Uma m√∫sica melanc√≥lica, tocada numa flauta, ecoa das profundezas da floresta."
        ]
        
        # Elementos ambientais imersivos usando os 5 sentidos
        ambientes = [
            "O ar carrega o cheiro de chuva recente e especiarias vindas de um mercado pr√≥ximo.",
            "Uma brisa gelada percorre a rua, fazendo as folhas secas dan√ßarem no ch√£o.",
            "O sol poente pinta as nuvens com tons de laranja e roxo.",
            "As tochas nas paredes crepitam, lan√ßando sombras dan√ßantes nas paredes de pedra.",
            "Voc√™s ouvem o som distante de um rio a correr, prometendo √°gua fresca."
        ]
        
        # Seleciona elementos aleat√≥rios para variedade
        gancho = random.choice(ganchos)
        ambiente = random.choice(ambientes)
        
        # Constr√≥i a situa√ß√£o final de forma direta
        situacao = f"""**{personagens_str}**, voc√™s est√£o juntos quando percebem algo: {ambiente}

De repente, {gancho}

O que voc√™s fazem?"""
        
        return situacao
    
    def _gerar_situacao_fallback(self, personagens_str: str) -> str:
        """Gera uma situa√ß√£o inicial de fallback simples (m√©todo legado)"""
        # Obt√©m algumas informa√ß√µes b√°sicas da campanha para personalizar
        nome_campanha = self.sessao.campanha.nome
        descricao_campanha = self.sessao.campanha.descricao
        
        # Usa informa√ß√µes da sess√£o se dispon√≠vel
        nome_sessao = self.sessao.nome
        descricao_sessao = self.sessao.descricao
        
        situacao = f"""üè∞ **{nome_sessao}** - Sess√£o iniciada no mundo de **{nome_campanha}**!

**{personagens_str}**, voc√™s se encontram no in√≠cio de uma nova aventura. 

{descricao_sessao if descricao_sessao else 'A situa√ß√£o se desenrola diante de voc√™s...'}

{descricao_campanha[:200] + '...' if len(descricao_campanha or '') > 200 else descricao_campanha or 'O mundo aguarda suas a√ß√µes.'}

Com expectativas e curiosidade no ar, √© hora de decidir como proceder nesta jornada.

O que voc√™s fazem?"""
        
        return situacao
    
    def _gerar_narrativa_consequencias(self, estado_turno: EstadoTurno) -> str:
        """Gera a narrativa das consequ√™ncias das a√ß√µes usando IA"""
        # Prepara as a√ß√µes dos jogadores para o contexto
        acoes_detalhadas = []
        for acao_dict in estado_turno.acoes_recebidas:
            nome = acao_dict['personagem_nome']
            acao = acao_dict['acao']
            acoes_detalhadas.append(f"**{nome}**: {acao}")
        
        acoes_texto = "\n".join(acoes_detalhadas)
        
        # Obt√©m contexto da situa√ß√£o atual
        situacao_anterior = estado_turno.descricao_situacao
        
        # OTIMIZA√á√ÉO: Usa narrativa inteligente imediata para melhor UX
        logger.info(f"Gerando narrativa de consequ√™ncias otimizada para turno {estado_turno.numero_turno}")
        
        # Gera narrativa contextualizada sem IA externa
        narrativa = self._gerar_narrativa_inteligente(estado_turno, acoes_detalhadas, situacao_anterior)
        
        # Registra a gera√ß√£o como intera√ß√£o r√°pida
        InteracaoIA.objects.create(
            sessao=self.sessao,
            usuario=self.sessao.campanha.organizador,
            tipo_interacao='NARRATIVA_CONSEQUENCIAS',
            prompt_usuario=f'Consequ√™ncias do Turno {estado_turno.numero_turno} (Otimizada)',
            resposta_ia=narrativa[:2000],
            tokens_usados=0,
            contexto={
                'turno': estado_turno.numero_turno,
                'num_acoes': len(estado_turno.acoes_recebidas),
                'tipo': 'narrativa_otimizada'
            }
        )
        
        return narrativa
    
    def _gerar_narrativa_inteligente(self, estado_turno: EstadoTurno, acoes_detalhadas: list, situacao_anterior: str) -> str:
        """Gera narrativa de consequ√™ncias concreta e direta, sem meta-linguagem - OTIMIZADA"""
        import random
        
        # Transi√ß√µes que focam na a√ß√£o imediata
        transicoes = [
            "Enquanto o grupo age, o ambiente ao redor reage.",
            "As a√ß√µes coordenadas do grupo causam um efeito imediato.",
            "O som das vossas a√ß√µes atrai aten√ß√£o.",
            "A poeira assenta e as consequ√™ncias imediatas se tornam claras.",
        ]

        # Consequ√™ncias concretas e sensoriais
        consequencias = [
            "Um barulho alto ecoa √† dist√¢ncia, como uma rocha a deslizar.",
            "O ar fica subitamente mais frio e uma sombra parece mover-se na periferia da vossa vis√£o.",
            "O NPC que observava voc√™s agora tem uma express√£o de choque e medo.",
            "Uma porta que antes estava trancada range e abre-se lentamente.",
            "O ch√£o treme por um breve momento, derrubando alguns objetos de uma prateleira pr√≥xima."
        ]

        # Descri√ß√µes de continuidade focadas no pr√≥ximo passo
        continuidades = [
            "Diante deste novo desenvolvimento, um sil√™ncio expectante cai sobre o grupo.",
            "A cena agora √© diferente, e um novo conjunto de escolhas se apresenta.",
            "O resultado imediato das vossas a√ß√µes deixa uma pergunta no ar.",
        ]

        # Seleciona elementos aleat√≥rios
        transicao = random.choice(transicoes)
        consequencia = random.choice(consequencias)
        continuidade = random.choice(continuidades)
        
        # Constr√≥i a narrativa
        acoes_formatadas = "\n".join([f"  ‚Ä¢ {acao}" for acao in acoes_detalhadas])
        
        narrativa = f"""
**Turno {estado_turno.numero_turno} - Consequ√™ncias**

{transicao}
{acoes_formatadas}

{consequencia} {continuidade}

O que voc√™s fazem?"""
        
        return narrativa
    
    def _gerar_narrativa_fallback(self, estado_turno: EstadoTurno, acoes_detalhadas: list) -> str:
        """Gera uma narrativa de fallback simples (m√©todo legado)"""
        narrativa_fallback = f"""üé≠ **Turno {estado_turno.numero_turno} - Resolvendo A√ß√µes:**

{chr(10).join(acoes_detalhadas)}

**Resultado**: As a√ß√µes dos personagens se desenrolam de forma coordenada. O mundo responde √†s suas escolhas, criando novas possibilidades e revelando consequ√™ncias interessantes.

A narrativa se desenvolve naturalmente a partir das decis√µes tomadas pelos her√≥is, e a aventura continua com novos desafios e oportunidades surgindo no horizonte...

üéØ *Aguardando pr√≥xima situa√ß√£o...*"""
        
        return narrativa_fallback
    
    def gerar_nova_situacao(self, turno_numero: int) -> Dict[str, Any]:
        """Gera nova situa√ß√£o ap√≥s processar um turno"""
        personagens = self._obter_personagens_ativos()
        personagens_nomes = [p.nome for p in personagens]
        personagens_str = ", ".join(personagens_nomes)
        
        # Obt√©m √∫ltimas intera√ß√µes para contexto
        interacoes_recentes = InteracaoIA.objects.filter(
            sessao=self.sessao
        ).order_by('-data_interacao')[:5]
        
        contexto_recente = ""
        if interacoes_recentes.exists():
            contexto_recente = "\n".join([
                f"- {i.tipo_interacao}: {i.resposta_ia[:100]}..." 
                for i in interacoes_recentes
            ])
        
        # Tenta gerar situa√ß√£o contextual usando IA
        try:
            from .ai_client import get_ia_client
            from .prompts import ArquitetoDeMundosPrompts
            import asyncio
            
            prompt = f"""
            {ArquitetoDeMundosPrompts.get_sistema_base(
                self.sessao.estilo_narrativo,
                self.sessao.criatividade_nivel,
                self.sessao.dificuldade_nivel
            )}
            
            TAREFA: Criar uma nova situa√ß√£o ap√≥s processar as a√ß√µes dos jogadores
            
            CONTEXTO DA CAMPANHA:
            - Nome: {self.sessao.campanha.nome}
            - Descri√ß√£o: {self.sessao.campanha.descricao}
            - Sess√£o: {self.sessao.nome}
            
            PERSONAGENS ATIVOS:
            {personagens_str}
            
            TURNO ATUAL:
            {turno_numero}
            
            CONTEXTO RECENTE DA SESS√ÉO:
            {contexto_recente if contexto_recente else "In√≠cio da sess√£o."}
            
            CRIE UMA NOVA SITUA√á√ÉO QUE:
            
            1. EVOLUA NATURALMENTE:
               - Reflita as consequ√™ncias das a√ß√µes anteriores
               - Mantenha consist√™ncia com o que j√° aconteceu
               - Introduza novos elementos interessantes
            
            2. CRIE OPORTUNIDADES:
               - Apresente novos desafios ou possibilidades
               - D√™ op√ß√µes interessantes para os personagens
               - Permita que cada personagem possa contribuir
            
            3. MANTENHA O RITMO:
               - N√£o seja muito longa ou muito curta
               - Crie tens√£o ou expectativa apropriada
               - Mantenha o interesse dos jogadores
            
            4. SEJA IMERSIVA:
               - Use descri√ß√µes sensoriais
               - Crie uma atmosfera v√≠vida
               - Torne o mundo real e tang√≠vel
            
            FORMATO DA RESPOSTA:
            Escreva uma descri√ß√£o de situa√ß√£o (150-300 palavras) que:
            - Descreva como a situa√ß√£o evoluiu
            - Apresente o novo cen√°rio ou desafio
            - Termine perguntando o que os personagens fazem
            
            Use o estilo narrativo definido e seja criativo mas coerente.
            """
            
            # Executa gera√ß√£o de forma s√≠ncrona
            ia_client = get_ia_client()
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                resultado = loop.run_until_complete(
                    ia_client.gerar_conteudo(prompt, usar_cache=False)
                )
                nova_situacao = resultado['conteudo']
                
                # Registra a gera√ß√£o como intera√ß√£o
                InteracaoIA.objects.create(
                    sessao=self.sessao,
                    usuario=self.sessao.campanha.organizador,
                    tipo_interacao='NOVA_SITUACAO',
                    prompt_usuario=f'Nova situa√ß√£o para Turno {turno_numero}',
                    resposta_ia=nova_situacao[:2000],
                    tokens_usados=resultado.get('tokens_usados', 0),
                    contexto={'turno': turno_numero}
                )
                
                return {
                    'situacao': nova_situacao,
                    'chamada_jogadores': f"**{personagens_str}**, o que voc√™s fazem agora?",
                    'gerada_por_ia': True
                }
                
            finally:
                loop.close()
                
        except Exception as e:
            logger.warning(f"Falha ao gerar nova situa√ß√£o com IA: {e}")
            # Fallback para situa√ß√£o gen√©rica
            return self._gerar_situacao_generica_fallback(turno_numero, personagens_str)
    
    def _gerar_situacao_generica_fallback(self, turno_numero: int, personagens_str: str) -> Dict[str, Any]:
        """Gera situa√ß√£o gen√©rica e concreta quando a IA falha"""
        import random

        ambientes = [
            "O ar ao redor de voc√™s fica mais denso e um sil√™ncio repentino toma conta do local.",
            "Voc√™s notam um objeto brilhando sutilmente debaixo de uma pilha de escombros.",
            "Um som de algo pesado a ser arrastado vem do corredor seguinte."
        ]

        situacao_generica = f"""**Turno {turno_numero}**

{random.choice(ambientes)}

O que voc√™s fazem?"""
        
        return {
            'situacao': situacao_generica,
            'chamada_jogadores': f"**{personagens_str}**, como voc√™s reagem √† nova situa√ß√£o?",
            'gerada_por_ia': False
        }
    
    def _obter_personagens_ativos(self) -> List[Personagem]:
        """Obt√©m lista de personagens ativos na campanha"""
        return list(Personagem.objects.filter(
            campanha=self.sessao.campanha,
            ativo=True
        ).select_related('usuario'))
    
    def _obter_personagem_do_usuario(self, usuario_id: int) -> Optional[Personagem]:
        """Obt√©m o personagem de um usu√°rio espec√≠fico nesta campanha"""
        try:
            return Personagem.objects.get(
                campanha=self.sessao.campanha,
                usuario_id=usuario_id,
                ativo=True
            )
        except Personagem.DoesNotExist:
            return None
    
    def _obter_estado_turno(self) -> Optional[EstadoTurno]:
        """Obt√©m o estado atual do turno do cache"""
        dados_turno = cache.get(self.cache_key_turno)
        if not dados_turno:
            return None
        
        # Reconstr√≥i objetos AcaoJogador
        acoes_reconstruidas = []
        for acao_dict in dados_turno.get('acoes_recebidas', []):
            acao = AcaoJogador(**acao_dict)
            acoes_reconstruidas.append(acao)
        
        dados_turno['acoes_recebidas'] = acoes_reconstruidas
        
        return EstadoTurno(**dados_turno)
    
    def _registrar_interacao_jogador(self, personagem: Personagem, acao: str):
        """Registra a intera√ß√£o do jogador no banco de dados"""
        InteracaoIA.objects.create(
            sessao=self.sessao,
            usuario=personagem.usuario,
            tipo_interacao='ACAO_JOGADOR',
            prompt_usuario=f"{personagem.nome}: {acao}",
            resposta_ia="A√ß√£o registrada - aguardando outros jogadores",
            contexto={'personagem': personagem.nome, 'turno': 'aguardando'},
            tokens_usados=0
        )
    
    def pausar_sessao(self) -> Dict[str, Any]:
        """Pausa a sess√£o atual"""
        cache.set(self.cache_key_estado, EstadoSessao.PAUSADA.value, self.cache_timeout)
        
        return {
            "sessao_pausada": True,
            "mensagem": "‚è∏Ô∏è **Sess√£o pausada**. Use 'retomar' para continuar."
        }
    
    def retomar_sessao(self) -> Dict[str, Any]:
        """Retoma uma sess√£o pausada"""
        cache.set(self.cache_key_estado, EstadoSessao.ATIVA.value, self.cache_timeout)
        
        estado_turno = self._obter_estado_turno()
        if estado_turno:
            return {
                "sessao_retomada": True,
                "turno_atual": estado_turno.numero_turno,
                "fase_atual": estado_turno.fase.value,
                "mensagem": "‚ñ∂Ô∏è **Sess√£o retomada**! Continuando a aventura..."
            }
        else:
            return self.ativar_modo_jogo()
    
    def encerrar_sessao(self, resumo: str = "") -> Dict[str, Any]:
        """Encerra a sess√£o de jogo"""
        self.sessao.ativa = False
        self.sessao.save()
        
        cache.delete(self.cache_key_estado)
        cache.delete(self.cache_key_turno)
        
        return {
            "sessao_encerrada": True,
            "resumo": resumo,
            "mensagem": "üèÅ **Sess√£o encerrada**. Obrigado por jogarem!"
        }
    
    def obter_status_sessao(self) -> Dict[str, Any]:
        """Obt√©m status completo da sess√£o"""
        estado = self.estado_sessao
        estado_turno = self._obter_estado_turno()
        
        if estado_turno:
            return {
                "estado_sessao": estado.value,
                "turno_atual": estado_turno.numero_turno,
                "fase_atual": estado_turno.fase.value,
                "personagens_esperados": estado_turno.personagens_esperados,
                "aguardando_personagens": estado_turno.aguardando_personagens,
                "acoes_recebidas": len(estado_turno.acoes_recebidas)
            }
        else:
            return {
                "estado_sessao": estado.value,
                "pronto_para_iniciar": estado == EstadoSessao.CONFIGURACAO
            }