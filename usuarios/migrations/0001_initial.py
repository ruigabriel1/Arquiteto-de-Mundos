# Generated by Django 5.2.6 on 2025-09-14 16:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome_completo', models.CharField(help_text='Nome completo do usuário', max_length=150, verbose_name='Nome Completo')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('avatar', models.ImageField(blank=True, help_text='Imagem de perfil do usuário', null=True, upload_to='avatares/', verbose_name='Avatar')),
                ('bio', models.TextField(blank=True, help_text='Descrição pessoal do usuário', max_length=500, verbose_name='Biografia')),
                ('configuracoes_jogo', models.JSONField(default=dict, help_text='Preferências pessoais para mecânicas de jogo', verbose_name='Configurações de Jogo')),
                ('configuracoes_interface', models.JSONField(default=dict, help_text='Preferências de tema, layout e acessibilidade', verbose_name='Configurações de Interface')),
                ('campanhas_como_jogador', models.PositiveIntegerField(default=0, verbose_name='Campanhas como Jogador')),
                ('campanhas_como_mestre', models.PositiveIntegerField(default=0, verbose_name='Campanhas como Mestre')),
                ('horas_jogadas', models.PositiveIntegerField(default=0, help_text='Total de horas em sessões de RPG', verbose_name='Horas Jogadas')),
                ('data_ultima_atividade', models.DateTimeField(auto_now=True, verbose_name='Última Atividade')),
                ('ativo', models.BooleanField(default=True, help_text='Define se o usuário pode acessar o sistema', verbose_name='Ativo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
